pipeline {
    agent any

    environment {
        TF_DIR = 'terraform'
        APP_DIR = 'app'
        APP_FILE = 'app.jar'
        EC2_USER = 'ec2-user'
        EC2_IP = '<REPLACE_WITH_EC2_PUBLIC_IP>'
        SSH_KEY_ID = 'your-jenkins-ssh-credentials-id' // stored in Jenkins
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TF_DIR}") {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Fetch EC2 IP (Optional)') {
            steps {
                dir("${TF_DIR}") {
                    script {
                        def ip = sh(script: "terraform output -raw instance_public_ip", returnStdout: true).trim()
                        env.EC2_IP = ip
                        echo "EC2 IP: ${ip}"
                    }
                }
            }
        }

        stage('Deploy JAR to EC2') {
            steps {
                sshagent(credentials: ["${SSH_KEY_ID}"]) {
                    sh """
                        scp -o StrictHostKeyChecking=no ${APP_DIR}/${APP_FILE} ${EC2_USER}@${EC2_IP}:/home/${EC2_USER}/
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'nohup java -jar /home/${EC2_USER}/${APP_FILE} > app.log 2>&1 &'
                    """
                }
            }
        }

        stage('Install Monitoring Stack') {
            steps {
                sshagent(credentials: ["${SSH_KEY_ID}"]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} << 'EOF'
                            sudo yum install -y wget docker
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            
                            # Prometheus
                            wget https://github.com/prometheus/prometheus/releases/download/v2.52.0/prometheus-2.52.0.linux-amd64.tar.gz
                            tar xvfz prometheus-*.tar.gz
                            sudo mv prometheus-*/prometheus /usr/local/bin/

                            # Grafana
                            sudo yum install -y https://dl.grafana.com/oss/release/grafana-9.6.3-1.x86_64.rpm
                            sudo systemctl start grafana-server
                            sudo systemctl enable grafana-server

                            # ELK stack using Docker
                            sudo docker run -d --name elk -p 5601:5601 -p 9200:9200 -p 5044:5044 sebp/elk
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✅ CI/CD pipeline completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
